<project name="NTServices_1_0" default="build-ear" basedir=".">

	<property file="user.properties" />
	<property file="common.properties" />
	<property environment="env" />

	<property name="war.name" value="NTServices_1_0" />
	<property name="src.dir" location="${basedir}/src" />
	<property name="dist.dir" location="${basedir}/dist" />
	<property name="build.dir" location="${basedir}/build" />
	<property name="classes.dir" location="${basedir}/bin" />
	<property name="webroot.dir" location="${basedir}/web" />
	<property name="compile.classpath" location="${basedir}/web/WEB-INF/lib" />

	<property name="build.classes.dir" location="bin" />
	<property name="lib" value="web/WEB-INF/lib" />
	<property name="lib.build-client.dir" value="${root.dir}\\web/WEB-INF/lib" />

	<!-- time stamp for a build -->
	<tstamp>
		<format property="VERSION" pattern="yyyyMMdd-HHmm" locale="en" />
	</tstamp>
	
	<patternset id="jar.files">
		<include name="**/*.jar" />
		<include name="**/*.zip" />
	</patternset>

	<path id="base.libraries">
		<pathelement location="${build.classes}" />
		<fileset dir="${axis2.home}\lib">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="project.classpath">
		<fileset dir="${root.dir}\\lib">
			<patternset refid="jar.files" />
		</fileset>
		<fileset dir="${client.dir}">
			<patternset refid="jar.files" />
		</fileset>

	</path>

	<property name="axis2.classpath" value="base.libraries" />
	<property name="build.dir" value="${root.dir}\\bin" />

	<mkdir dir="${build.classes.dir}" />
	<mkdir dir="${dist.dir}" />
	
	<target name="services_recompile">
		<antcall target="services_java2wsdl" />
		<antcall target="services_wsdl2java" />
	</target>

	<target name="All_Web_Services_Rebuild">
		<antcall target="services_java2wsdl" />
		<ant target="WT_services_java2wsdl" />
		<antcall target="services_wsdl2java" />
		<ant target="WT_services_wsdl2java" />
	</target>


	<target name="services_java2wsdl">
		<taskdef name="Java2WSDLTask" classname="org.apache.ws.java2wsdl.Java2WSDLTask" classpathref="${axis2.classpath}" />
		<Java2WSDLTask classPath="${build.classes.dir}" 
			className="aero.nettracer.serviceprovider.ws_1_0.ReservationService_1_0" 
			outputLocation="src/aero/nettracer/serviceprovider/ws_1_0" 
			outputFileName="ReservationService_1_0.wsdl">
		</Java2WSDLTask>
	</target>

	<target name="services_wsdl2java">
		<java classname="org.apache.axis2.wsdl.WSDL2Java" fork="true" classpathref="${axis2.classpath}">
			<arg value="-uri" />
			<arg file="src/aero/nettracer/serviceprovider/ws_1_0/ReservationService_1_0.wsdl" />
			<arg value="-o" />
			<arg file="${build.dir}/webservices" />
			<arg value="-ss" />
			<arg value="-sd" />
			<arg value="-g" />
			<arg value="-d" />
			<arg value="xmlbeans" />
		</java>

		<!-- copy services.xml to web-inf 
		
		<copy todir="${basedir}/web/WEB-INF/services/NTService/META-INF" file="${build.dir}/webservices/NTService/resources/services.xml" />
		-->
		<!-- copy java files to src -->
		<!--		
		<copy todir="${basedir}/src">
			<fileset dir="${build.dir}/webservices/NTService/src">
				<include name="**/**/*.java" />
				<exclude name="**/org/**" />
			</fileset>
		</copy>



		<mkdir dir="${build.dir}/webservices/NTService/temp" />
		<move todir="${build.dir}/webservices/NTService/temp">
			<fileset dir="${build.dir}/webservices/NTService/resources">
				<include name="*schema*/**/*.class" />
				<include name="*schema*/**/*.xsb" />
			</fileset>
		</move>

		<jar destfile="${build.dir}/webservices/NTService/ReservationService_1_0.jar" basedir="${build.dir}/webservices/NTService/temp">
		</jar>

		<move todir="${basedir}/lib/jars" file="${build.dir}/webservices/NTService/ReservationService_1_0.jar" />
-->
		<!-- clean up -->
		<!--		
		<delete dir="${build.dir}/webservices/NTService/temp" />
		<delete dir="${build.dir}/webservices/NTService/resources" />
		<delete dir="${build.dir}/webservices/NTService/src" />
-->
	</target>

	<taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask" classpathref="project.classpath" />

	<target name="schemaexport" description="Exports a generated schema to file">
		<hibernatetool destdir="${build.dir}">
			<classpath>
				<path refid="project.classpath" />
				<path location="${classes.dir}" />
				<path location="${client.dir}\slf4j-api.jar" />
			</classpath>
			<annotationconfiguration configurationfile="C:/workspace/NTService_1_0/src/hibernate_main.cfg.xml" />
			<hbm2ddl drop="true" create="true" export="false" outputfilename="central-svc-ddl.sql" delimiter=";" format="true" />
		</hibernatetool>
	</target>

<!--	BUILD ALL TARGETS -->
	<target name="build-all">
		<antcall target="build-testing"></antcall>
		<antcall target="build-training"></antcall>
		<antcall target="build-production"></antcall>
	</target>
	
	<target name="build-testing">
		<antcall target="build-fs-all-test"></antcall>
		<antcall target="build-central-all-test"></antcall>
	</target>
	
	<target name="build-training">
		<antcall target="build-fs-all-train"></antcall>
		<antcall target="build-central-all-train"></antcall>
	</target>
		
	<target name="build-production">
		<antcall target="build-fs-all-prod"></antcall>
		<antcall target="build-central-all-prod"></antcall>
	</target>
	
	
	<!--	BUILD NTFS TARGETS -->
	<target name="build-fs-all-test">
		<antcall target="build-fs-internal-test"></antcall>
		<antcall target="build-fs-private-ssl-test"></antcall>
		<antcall target="build-fs-public-ssl-test"></antcall>
	</target>
	
	<target name="build-fs-all-train">
		<antcall target="build-fs-internal-train"></antcall>
		<antcall target="build-fs-private-ssl-train"></antcall>
		<antcall target="build-fs-public-ssl-train"></antcall>
	</target>
		
	<target name="build-fs-all-prod">
		<antcall target="build-fs-internal-prod"></antcall>
		<antcall target="build-fs-private-ssl-prod"></antcall>
		<antcall target="build-fs-public-ssl-prod"></antcall>
	</target>
	
	<target name="build-fs-internal-local">
		<property name="staging.project" value="fsservice" />
		<property name="staging.env" value="local" />
		<property name="client.name" value="internal" />
		<property name="environment.name" value="local" />
		<property name="ear.name" value="ntfs_internal_local.ear" />
		<antcall target="build-fs-donotrun" />
	</target>
	
	<target name="build-fs-internal-hudson">
		<property name="staging.project" value="fsservice" />
		<property name="staging.env" value="hudson" />
		<property name="client.name" value="internal" />
		<property name="environment.name" value="hudson" />
		<property name="ear.name" value="ntfs_internal_hudson.ear" />
		<antcall target="build-fs-donotrun" />
	</target>
	
	<target name="build-fs-internal-test">
		<property name="staging.project" value="fsservice" />
		<property name="staging.env" value="testing" />
		<property name="client.name" value="internal" />
		<property name="environment.name" value="test" />
		<property name="ear.name" value="ntfs_internal_test.ear" />
		<antcall target="build-fs-donotrun" />
	</target>
	
	<target name="build-fs-internal-train">
		<property name="staging.project" value="fsservice" />
		<property name="staging.env" value="training" />
		<property name="client.name" value="internal" />
		<property name="environment.name" value="train" />
		<property name="ear.name" value="ntfs_internal_train.ear" />
		<antcall target="build-fs-donotrun" />
	</target>
	
	<target name="build-fs-internal-prod">
		<property name="staging.project" value="fsservice" />
		<property name="staging.env" value="production" />
		<property name="client.name" value="internal" />
		<property name="environment.name" value="prod" />
		<property name="ear.name" value="ntfs_internal_prod.ear" />
		<antcall target="build-fs-donotrun" />
	</target>
	
	<target name="build-fs-private-ssl-test">
		<property name="staging.project" value="fsservice" />
		<property name="staging.env" value="testing" />
		<property name="client.name" value="private-ssl" />
		<property name="environment.name" value="test" />
		<property name="ear.name" value="ntfs_private_ssl_test.ear" />
		<antcall target="build-fs-donotrun" />
	</target>
	
	<target name="build-fs-private-ssl-train">
		<property name="staging.project" value="fsservice" />
		<property name="staging.env" value="training" />
		<property name="client.name" value="private-ssl" />
		<property name="environment.name" value="train" />
		<property name="ear.name" value="ntfs_private_ssl_train.ear" />
		<antcall target="build-fs-donotrun" />
	</target>
	
	<target name="build-fs-private-ssl-prod">
		<property name="staging.project" value="fsservice" />
		<property name="staging.env" value="production" />
		<property name="client.name" value="private-ssl" />
		<property name="environment.name" value="prod" />
		<property name="ear.name" value="ntfs_private_ssl_prod.ear" />
		<antcall target="build-fs-donotrun" />
	</target>
	
	<target name="build-fs-public-ssl-test">
		<property name="staging.project" value="fsservice" />
		<property name="staging.env" value="testing" />
		<property name="client.name" value="public-ssl" />
		<property name="environment.name" value="test" />
		<property name="ear.name" value="ntfs_public_ssl_test.ear" />
		<antcall target="build-fs-donotrun" />
	</target>
	
	<target name="build-fs-public-ssl-train">
		<property name="staging.project" value="fsservice" />
		<property name="staging.env" value="training" />
		<property name="client.name" value="public-ssl" />
		<property name="environment.name" value="train" />
		<property name="ear.name" value="ntfs_public_ssl_train.ear" />
		<antcall target="build-fs-donotrun" />
	</target>
	
	<target name="build-fs-public-ssl-prod">
		<property name="staging.project" value="fsservice" />
		<property name="staging.env" value="production" />
		<property name="client.name" value="public-ssl" />
		<property name="environment.name" value="prod" />
		<property name="ear.name" value="ntfs_public_ssl_prod.ear" />
		<antcall target="build-fs-donotrun" />
	</target>
	
	<target name="build-fs-donotrun">
		<copy todir="${build.dir}/services-war" overwrite="true">
			<fileset dir="${webroot.dir}" >
				<include name="WEB-INF/**/*"/>
				<include name="META-INF/**/*"/>
			</fileset>
		</copy>
		<!--ant target="build-war">
		</ant-->
		
		<copy todir="${build.dir}/services-war/WEB-INF/classes/" file="${root.dir}/environments/${client.name}/${environment.name}/hibernate_main.cfg.xml" overwrite="true" />
		<copy todir="${build.dir}/services-war/WEB-INF/classes/" file="${root.dir}/environments/${client.name}/${environment.name}/hibernate_geo.cfg.xml" overwrite="true" />
		<copy todir="${build.dir}/services-war/WEB-INF/classes/" file="${root.dir}/dozer/fs/dozerBeanMapping.xml" overwrite="true" />
		
		<javac srcdir="./src" fork="true" destdir="${build.dir}/services-war/WEB-INF/classes" debug="on" memoryinitialsize="256m" memorymaximumsize="256m" >
			<classpath refid="project.classpath" />
		</javac>
		
		<mkdir dir="${build.dir}/temp/META-INF" />
	    <manifest file="${build.dir}/temp/META-INF/MANIFEST.MF">
	    	<attribute name="Class-Path" value=
	    	"claim_model.jar"/>   
	    </manifest>
		
		<jar manifest="${build.dir}/temp/META-INF/MANIFEST.MF" destfile="${dist.dir}/nt_fs.jar" basedir="${build.dir}/services-war/WEB-INF/classes/">
			<include name="${build.dir}/services-war/WEB-INF/classes/" />
			<include name="**/**/fraud/**/*.class" />
			<include name="**/**/fraud/client/*.class" />
			<include name="**/**/nettracer/fs/utilities/tracing/*.class" />
			<include name="**/**/nettracer/fs/utilities/*.class" />
			<include name="**/**/nettracer/fs/model/**/*.class" />
			<include name="**/**/nettracer/fs/bmo/*.class" />
			<include name="**/**/PrivacyPermissions*.class" />
			<include name="**/**/HibernateWrapper.class" />
			<include name="**/**/PrivacyPermissionsBMO.class" />
			<include name="**/**/**/common/db/*.class" />
			<include name="**/common/pojo/*.class" />
			<include name="**/**/*.xml" />
		</jar>
		
	    <manifest file="${build.dir}/temp/META-INF/MANIFEST.MF">
	    	<attribute name="Dependencies" value=
	    	"org.hibernate,
	    	org.antlr,
	    	org.apache.commons.logging,
	    	org.apache.xerces,
	    	javax.persistence.api,
	    	com.rmiio,
	    	org.jboss.remote-naming,
	    	org.javassist,
	    	org.dozer,
	    	org.apache.commons.codec"/>
	    </manifest>
		
		<jar destfile="${dist.dir}/nt_fs_client.jar" basedir="${build.dir}/services-war/WEB-INF/classes/">
			<metainf dir="${build.dir}/temp/META-INF">
			</metainf>
			<include name="**/**/fraud/client/ClaimClientRemote*.class" />
			<include name="**/**/fraud/ClaimRemote.class" />
			<include name="**/**/fraud/PrivacyPermissionsRemote.class" />
			<include name="**/**/fraud/PrivacyPermissionsBean.class" />
			<include name="**/**/db/PrivacyPermissions*.class" />
		</jar>
		
		<!--
		<copy file="${dist.dir}/nt_fs.jar" todir="c:/workspace/Trunk/lib/jars"/>
		-->
		
		<copy file="${root.dir}/lib/claim_model.jar" todir="${dist.dir}"/>
		

		<ear manifest="${build.dir}/temp/META-INF/MANIFEST.MF" destfile="${dist.dir}/${ear.name}" appxml="${src.dir}/../metadata/fs/application.xml">
			<fileset dir="${dist.dir}" includes="nt_fs.jar, claim_model.jar" />
		</ear>
		
		<mkdir dir="${staging.dir}/${staging.env}/${staging.project}"/>
		<copy todir="${staging.dir}/${staging.env}/${staging.project}" verbose="true">
			<fileset file="${dist.dir}/${ear.name}">
			</fileset>
		</copy>
		
		<!--
		<copy todir="${app.deploy.dir}" verbose="true">
			<fileset file="${dist.dir}/ntfs_internal_test.ear">
			</fileset>
		</copy>
		-->
		
		<!--
		<copy todir="c:/upload" verbose="true">
			<fileset file="${dist.dir}/ntfs_internal_test.ear">
			</fileset>
		</copy>
		-->
	</target>
	
	<!--	BUILD CENTRAL TARGETS -->
	
	<target name="build-central-all-test">
		<antcall target="build-central-test"></antcall>
		<antcall target="build-central-ustest"></antcall>
	</target>
	
	<target name="build-central-all-train">
		<antcall target="build-central-train"></antcall>
	</target>
	
	<target name="build-central-all-prod">
		<antcall target="build-central-prod"></antcall>
		<antcall target="build-central-usprod"></antcall>
	</target>
	
	<target name="build-central-local">
		<property name="staging.project" value="hosted-central" />
		<property name="staging.env" value="local" />
		<property name="client.name" value="central" />
		<property name="environment.name" value="local" />
		<property name="ear.name" value="NTServices_1_0.ear" />
		<antcall target="build-central-donotrun" />
	</target>
	
	<target name="build-central-hudson">
		<property name="staging.project" value="hosted-central" />
		<property name="staging.env" value="hudson" />
		<property name="client.name" value="central" />
		<property name="environment.name" value="hudson" />
		<property name="ear.name" value="NTServices_1_0.ear" />
		<antcall target="build-central-donotrun" />
	</target>
	
	<target name="build-central-test">
		<property name="staging.project" value="hosted-central" />
		<property name="staging.env" value="testing" />
		<property name="client.name" value="central" />
		<property name="environment.name" value="test" />
		<property name="ear.name" value="NTServices_1_0.ear" />
		<antcall target="build-central-donotrun" />
	</target>
	
	<target name="build-central-train">
		<property name="staging.project" value="hosted-central" />
		<property name="staging.env" value="training" />
		<property name="client.name" value="central" />
		<property name="environment.name" value="train" />
		<property name="ear.name" value="NTServices_1_0.ear" />
		<antcall target="build-central-donotrun" />
	</target>
	
	<target name="build-central-prod">
		<property name="staging.project" value="hosted-central" />
		<property name="staging.env" value="production" />
		<property name="client.name" value="central" />
		<property name="environment.name" value="prod" />
		<property name="ear.name" value="NTServices_1_0.ear" />
		<antcall target="build-central-donotrun" />
	</target>
	
	<target name="build-central-ustest">
		<property name="staging.project" value="us-central" />
		<property name="staging.env" value="dev" />
		<property name="client.name" value="central" />
		<property name="environment.name" value="ustest" />
		<property name="ear.name" value="NTServices_1_0.ear" />
		<antcall target="build-central-donotrun" />
	</target>
			
	<target name="build-central-usprod">
		<property name="staging.project" value="us-central" />
		<property name="staging.env" value="production" />
		<property name="client.name" value="central" />
		<property name="environment.name" value="usprod" />
		<property name="ear.name" value="NTServices_1_0.ear" />
		<antcall target="build-central-donotrun" />
	</target>			
	
	<target name="build-central-donotrun" id="build" description="Build WAR file">
		<delete file="${build.dir}/myapp.zip" failonerror="false">
		</delete>
		
		<delete dir="${build.dir}/services-war" />
		<mkdir dir="${build.dir}/services-war/WEB-INF/classes"/>

		
		
		<javac srcdir="./src" fork="true" destdir="${build.dir}/services-war/WEB-INF/classes" debug="on" memoryinitialsize="256m" memorymaximumsize="256m" >
			<classpath refid="project.classpath" />
		</javac>

		<copy todir="${build.dir}/services-war/WEB-INF/classes" overwrite="true">
			<fileset dir="${src.dir}" >
				<include name="**/*.properties"/>
				<include name="**/*.xml"/>
			</fileset>
		</copy>

		<mkdir dir="${build.dir}/services-war/META-INF" />
		
		<copy todir="${build.dir}/services-war" overwrite="true">
			<fileset dir="${webroot.dir}" >
				<include name="WEB-INF/**/*"/>
				<include name="META-INF/**/*"/>
			</fileset>
		</copy>
		
	    <manifest file="${build.dir}/services-war/META-INF/MANIFEST.MF">
	    	<attribute name="Dependencies" value="
	    		org.hibernate,
	    		org.antlr,
	    		org.apache.commons,
	    		org.apache.commons.logging,
	    		org.apache.xerces,
	    		javax.persistence.api,
	    		org.apache.axis2,
	    		org.apache.xmlbeans,
	    		org.apache.axiom,
	    		org.javassist,
	    		org.dozer,
	    		user.central_service,
	    		org.apache.commons.pool
	    		"/>
	    </manifest>
		
		<copy todir="${build.dir}/services-war/WEB-INF/classes/" overwrite="true">
			<fileset dir="${root.dir}/environments/${client.name}/${environment.name}" >
				<include name="**/hibernate_main.cfg.xml"/>
				<include name="**/hibernate_geo.cfg.xml"/>
				<include name="**/*_policy.xml"/>
			</fileset>
		</copy>
		
		<delete dir="${dist.dir}" failonerror="false" />
		<mkdir dir="${dist.dir}"/>
		<war manifest="${build.dir}/services-war/META-INF/MANIFEST.MF" destfile="${dist.dir}/${war.name}.war" duplicate="preserve" compress="true" webxml="web/WEB-INF/web.xml">
			<fileset dir="${build.dir}/services-war">
			    <exclude name="**/aero/nettracer/fs/**/*"/>
			    <exclude name="**/aero/nettracer/selfservice/fraud/**/*"/>
			</fileset>
		</war>
			
		<jar destfile="${dist.dir}/nt_mdb.jar" basedir="${build.dir}/services-war/WEB-INF/classes/" includes="**/MDB*.class">
			<include name="${build.dir}/services-war/WEB-INF/classes/" />
			<include name="**/**/SendForward.class" />
			<include name="**/**/Forward.class" />
			<include name="**/**/Segment.class" />
			<include name="**/**/HibernateWrapper.class" />
			<include name="**/**/UserDao.class" />
			<include name="**/common/db/*.class" />
			<include name="**/common/pojo/*.class" />
			<include name="**/**/*.xml" />
		</jar>
		
		<copy file="${root.dir}/lib/claim_model.jar" todir="${dist.dir}"/>
		

		<ear destfile="${dist.dir}/${ear.name}" appxml="${src.dir}/../metadata/central/application.xml">
			<fileset dir="${dist.dir}" includes="*.jar,*.war" />
		</ear>
		
		<mkdir dir="${staging.dir}/${staging.env}/${staging.project}"/>
		<copy todir="${staging.dir}/${staging.env}/${staging.project}" verbose="true">
			<fileset file="${dist.dir}/${ear.name}">
			</fileset>
		</copy>
		
	</target>
	
	<target name="build-ear" id="build" description="Build WAR file">
		<delete file="${build.dir}/myapp.zip" failonerror="false">
		</delete>
		
		<ant target="build-war">
		</ant>
		
		<jar destfile="${dist.dir}/nt_mdb.jar" basedir="${build.dir}/services-war/WEB-INF/classes/" includes="**/MDB*.class">
			<include name="${build.dir}/services-war/WEB-INF/classes/" />
			<include name="**/**/SendForward.class" />
			<include name="**/**/Forward.class" />
			<include name="**/**/Segment.class" />
			<include name="**/**/HibernateWrapper.class" />
			<include name="**/**/UserDao.class" />
			<include name="**/common/db/*.class" />
			<include name="**/common/pojo/*.class" />
			<include name="**/**/*.xml" />
		</jar>
		
		<!--
		<jar destfile="${dist.dir}/nt_fs.jar" basedir="${build.dir}/services-war/WEB-INF/classes/">
			<metainf dir="${src.dir}/../metadata">
				<include name="ejb-jar.xml"/>
			</metainf>
			<include name="${build.dir}/services-war/WEB-INF/classes/" />
			<include name="**/**/fraud/Claim*.class" />
			<include name="**/**/nettracer/fs/utilities/tracing/*.class" />
			<include name="**/**/nettracer/fs/utilities/*.class" />
			<include name="**/**/nettracer/fs/model/*.class" />
			<include name="**/**/nettracer/fs/bmo/*.class" />
			<include name="**/**/PrivacyPermissions*.class" />
			<include name="**/**/HibernateWrapper.class" />
			<include name="**/**/PrivacyPermissionsBMO.class" />
			<include name="**/**/**/common/db/*.class" />
			<include name="**/common/pojo/*.class" />
			<include name="**/**/*.xml" />
		</jar>

		
		<copy file="${dist.dir}/nt_fs.jar" todir="c:/workspace/Trunk/lib/jars"/>
				-->
		<copy file="${root.dir}/lib/claim_model.jar" todir="${dist.dir}"/>
		

		<ear destfile="${dist.dir}/NTServices_1_0.ear" appxml="${src.dir}/../metadata/application.xml">
			<fileset dir="${dist.dir}" includes="*.jar,*.war"/>
		</ear>
		
		
		<copy todir="${app.deploy.dir}" verbose="true">
			<fileset file="${dist.dir}/NTServices_1_0.ear">
			</fileset>
		</copy>
		
		<copy todir="c:/upload" verbose="true">
			<fileset file="${dist.dir}/NTServices_1_0.ear">
			</fileset>
		</copy>
		
	</target>


	<target name="compile-all">
		<delete dir="${build.dir}/classes"/>
		<mkdir dir="${build.dir}/classes"/>
		<javac srcdir="./src" fork="true" destdir="${build.dir}/classes" debug="on"
			
			memoryinitialsize="256m"       memorymaximumsize="256m"
			>
			<classpath refid="project.classpath" />
		</javac>
	</target>
	
	<target name="build-war" id="build" description="Build WAR file" depends="compile-all">

		<!--<delete file="${app.deploy.dir}/${war.name}.war" failonerror="false" />-->
		<delete dir="${build.dir}/services-war" />
		<mkdir dir="${build.dir}/services-war"/>

		<copy todir="${build.dir}/services-war" overwrite="true">
			<fileset dir="${webroot.dir}" >
				<include name="WEB-INF/**/*"/>
				<include name="META-INF/**/*"/>
			</fileset>
		</copy>
		<copy todir="${build.dir}/services-war/WEB-INF/classes" overwrite="true">
			<fileset dir="${build.classes.dir}" />
		</copy>
		<delete dir="${dist.dir}" failonerror="false" />
		<mkdir dir="${dist.dir}"/>
		<war destfile="${dist.dir}/${war.name}.war" duplicate="preserve" compress="true" webxml="web/WEB-INF/web.xml">
			<fileset dir="${build.dir}/services-war"/>
		</war>
		<!--
		<copy todir="${app.deploy.dir}" verbose="true">
			<fileset dir="${dist.dir}">
				
			</fileset>
		</copy>
		<copy todir="c:\deploy" verbose="true">
			<fileset dir="${dist.dir}">
				
			</fileset>
		</copy>
		-->
		<echo>WAR copied! ${app.deploy.dir}, c:\deploy</echo>

	</target>

	<!--
	<target name="compile" depends="init">
		<javac srcdir="${src.dir}" destdir="${build.classes.dir}">
			<classpath refid="compile.classpath" />
		</javac>
		<copy todir="${build.classes.dir}">
		  <fileset dir="${src.dir}" includes="${source.files.tocopy}"/>
		</copy>
		<echo>Compilation complete!</echo>
	</target>
	-->

	<target name="init">
		<mkdir dir="${build.classes.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>



	<target name="Kiosk_services_java2wsdl">
		<taskdef name="Java2WSDLTask" classname="org.apache.ws.java2wsdl.Java2WSDLTask" classpathref="${axis2.classpath}" />
		<Java2WSDLTask classPath="${build.classes.dir}" 
			className="aero.nettracer.serviceprovider.ws_1_0.KioskService" 
			outputLocation="src/aero/nettracer/serviceprovider/ws_1_0" 
			outputFileName="KioskService_1_0.wsdl">
		</Java2WSDLTask>
	</target>

	<target name="Kiosk_services_wsdl2java">
		<java classname="org.apache.axis2.wsdl.WSDL2Java" fork="true" classpathref="${axis2.classpath}">
			<arg value="-uri" />
			<arg file="src/aero/nettracer/serviceprovider/ws_1_0/KioskService_1_0.wsdl" />
			<arg value="-o" />
			<arg file="${build.dir}/webservices/NTService" />
			<arg value="-ss" />
			<arg value="-sd" />
			<arg value="-g" />
			<arg value="-d" />
			<arg value="xmlbeans" />
		</java>

		<!-- copy services.xml to web-inf -->
		<copy todir="${basedir}/web/WEB-INF/services/NTService/META-INF" file="${build.dir}/webservices/NTService/resources/services.xml" />

		<!-- copy java files to src -->

		<copy todir="${basedir}/src">
			<fileset dir="${build.dir}/webservices/NTService/src">
				<include name="**/**/*.java" />
				<exclude name="**/org/**" />
			</fileset>
		</copy>



		<mkdir dir="${build.dir}/webservices/NTService/temp" />
		<move todir="${build.dir}/webservices/NTService/temp">
			<fileset dir="${build.dir}/webservices/NTService/resources">
				<include name="*schema*/**/*.class" />
				<include name="*schema*/**/*.xsb" />
			</fileset>
		</move>

		<jar destfile="${build.dir}/webservices/NTService/ReservationService_1_0.jar" basedir="${build.dir}/webservices/NTService/temp">
		</jar>

		<move todir="${basedir}/lib/jars" file="${build.dir}/webservices/NTService/ReservationService_1_0.jar" />

		<!-- clean up -->

		<delete dir="${build.dir}/webservices/NTService/temp" />
		<delete dir="${build.dir}/webservices/NTService/resources" />
		<delete dir="${build.dir}/webservices/NTService/src" />
	</target>


	<target name="WT_services_java2wsdl">
		<taskdef name="Java2WSDLTask" classname="org.apache.ws.java2wsdl.Java2WSDLTask" classpathref="${axis2.classpath}" />
		<Java2WSDLTask classPath="${build.classes.dir}" 
			className="aero.nettracer.serviceprovider.wt_1_0.WorldTracerService" 
			outputLocation="src/aero/nettracer/serviceprovider/wt_1_0" 
			outputFileName="WorldTracerService_1_0.wsdl">
		</Java2WSDLTask>
	</target>



	<target name="WT_services_wsdl2java">
		<java classname="org.apache.axis2.wsdl.WSDL2Java" fork="true" classpathref="${axis2.classpath}">
			<arg value="-uri" />
			<arg file="src/aero/nettracer/serviceprovider/wt_1_0/WorldTracerService_1_0.wsdl" />
			<arg value="-o" />
			<arg file="${build.dir}/webservices" />
			<arg value="-ss" />
			<arg value="-sd" />
			<arg value="-g" />
			<arg value="-d" />
			<arg value="xmlbeans" />
		</java>
		<!--
		
		
		
		<copy todir="${basedir}/web/WEB-INF/services/WTService/META-INF" file="${build.dir}/webservices/WTService/resources/services.xml" />
		
		
		


		<copy todir="${basedir}/src">
			<fileset dir="${build.dir}/webservices/WTService/src">
				<include name="**/**/*.java" />
				<exclude name="**/org/**" />
			</fileset>
		</copy>


		
		<mkdir dir="${build.dir}/webservices/WTService/temp" />
		<copy todir="${build.dir}/webservices/WTService/temp">
			<fileset dir="${build.dir}/webservices/WTService/resources">
				<include name="*schema*/**/*.class" />
				<include name="*schema*/**/*.xsb" />
			</fileset>
		</copy>

		
		<jar destfile="${build.dir}/webservices/WTService/WorldTracerService_1_0.jar" basedir="${build.dir}/webservices/WTService/temp">
		</jar>
		 

		<move todir="${basedir}/web/WEB-INF/lib" file="${build.dir}/webservices/WTService/WorldTracerService_1_0.jar" />

		
		
		<delete dir="${build.dir}/webservices/WTService/temp" />
		<delete dir="${build.dir}/webservices/WTService/resources" />
		<delete dir="${build.dir}/webservices/WTService/src" />
		-->
	</target>


	<target name="vendor_services_java2wsdl">
		<taskdef name="Java2WSDLTask" classname="org.apache.ws.java2wsdl.Java2WSDLTask" classpathref="${axis2.classpath}" />
		<Java2WSDLTask classPath="${build.classes.dir}" 
			className="aero.nettracer.vendor.delivery.DeliveryVendorService" 
			outputLocation="src/aero/nettracer/vendor/delivery/" 
			outputFileName="DeliveryVendorService.wsdl">
		</Java2WSDLTask>
	</target>
	
	<target name="buildEscrowUSAir">
		<property name="ant_project_name" value="usair-services"/>
		<property name="escrow_loc" value="${build.dir}/${ant_project_name}/escrow"/>

		<delete dir="${escrow_loc}"/>
		<mkdir dir="${escrow_loc}" />
		
		<mkdir dir="${escrow_loc}/src" />
		<mkdir dir="${escrow_loc}/lib" />
		
		<copy todir="${escrow_loc}/src" >
			<fileset dir="./src">
				<include name="**/*.java"/>
				<exclude name="**/spirit/*.*/"/>
				<include name="**/databases/usair*/hibernate_main.cfg.xml"/>
				<include name="dozerBeanMapping.xml"/>
				<include name="log4j.properties"/>
				<include name="US_PROD_policy.xml"/>
			</fileset>
		</copy>

		<copy todir="${escrow_loc}/environments" >
			<fileset dir="./environments" 
			includes="central/usprod/**,
				      central/ustest/**"/>
		</copy>

		<copy todir="${escrow_loc}/web" >
			<fileset dir="./web" />
		</copy>
		
		<copy todir="${escrow_loc}/metadata" >
			<fileset dir="./metadata" />
		</copy>
		
		<copy todir="${escrow_loc}/lib" >
			<fileset dir="./lib" />
		</copy>
		
		<copy todir="${escrow_loc}/providedJars" >
			<fileset dir="./providedJars" />
		</copy>
		
		<copy todir="${escrow_loc}" file="./build.xml" />

		
		<copy file="build_central.bat" todir="${escrow_loc}"></copy>
		<copy file="escrow_usair.properties" todir="${escrow_loc}"></copy>
		
		<copy todir="${escrow.staging}">
			<fileset dir="${escrow_loc}"/>
		</copy>
				
	</target>


</project>
