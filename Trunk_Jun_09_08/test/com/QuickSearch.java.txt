package com;

import java.util.regex.Pattern;

import junit.framework.Assert;

import org.apache.log4j.Logger;
import org.junit.Test;

public class QuickSearch {

	private static final String REDIRECT_TAG_NUMBER_SEARCH = "tagNumberSearch";
	private static final String REDIRECT_PNR_SEARCH = "pnrSearch";
	private static final String REDIRECT_NT_ID_SEARCH = "idSearch";
	private static final String REDIRECT_BDO_SEARCH = "bdoSearch";
	private static final String REDIRECT_EXPERT = "expertSearch";
	
	private static final String REDIRECT_INCIDENT_SEARCH = "incidentSearch";
	private static final String REDIRECT_ONHAND_SEARCH = "onhandSearch";
	
	
	
	private static final String PATTERN_10_DIGIT_BAG_TAG = "^\\d{10}$";
	private static final String PATTERN_9_DIGIT_BAG_TAG = "^\\d{9}$";
	private static final String PATTERN_8_CHAR_BAG_TAG = "^[A-Z0-9]{2}\\d{6}$";
	private static final String PATTERN_PNR = "^[A-Z0-9]{6}$";
	private static final String PATTERN_NT_ID = "^[A-Z]{3}[0-9A-Z]{2}%{0,1}\\d{0,7}%{0,1}\\d{0,7}$";
	private static final String PATTERN_BDO_ID = "^BDO%{0,1}\\d{0,10}%{0,1}\\d{0,9}$";
	private static final String PATTERN_EXPERT_FUNCTION = "^[A-Z]{1,3}:";
	
	private static final String EXPERT_INCIDENT = "I:";
	private static final String EXPERT_OHD = "O:";
	private static final String EXPERT_AGENT = "A:";
	private static final String EXPERT_STATION = "S:";
	private static final String EXPERT_MASS = "M:";
	private static final String EXPERT_PICKUP = "P:";
	private static final String EXPERT_AUDIT_INCIDENT = "AI:";
	private static final String EXPERT_AUDIT_OHD = "AO:";
	
	private static Logger logger = Logger.getLogger(QuickSearch.class);

	public QuickSearchDTO search(String s) {
		s = s.toUpperCase();
		QuickSearchDTO dto = new QuickSearchDTO();

		Pattern tenDigitPattern = Pattern.compile(PATTERN_10_DIGIT_BAG_TAG);
		Pattern nineDigitPattern = Pattern.compile(PATTERN_9_DIGIT_BAG_TAG);
		Pattern twoCharPattern = Pattern.compile(PATTERN_8_CHAR_BAG_TAG);
		Pattern pnrPattern = Pattern.compile(PATTERN_PNR);
		Pattern ntIdPattern1 = Pattern.compile(PATTERN_NT_ID);
		Pattern bdoPattern = Pattern.compile(PATTERN_BDO_ID);
		Pattern expertPattern = Pattern.compile(PATTERN_EXPERT_FUNCTION);

		
		if (expertPattern.matcher(s).find()) {
			logger.debug("Expert... 0");
			dto.setRedirect(REDIRECT_EXPERT);
			
			if (s.startsWith(EXPERT_INCIDENT)) {			
			} else if (s.startsWith(EXPERT_OHD)) {
			} else if (s.startsWith(EXPERT_AGENT)) {
			} else if (s.startsWith(EXPERT_STATION)) {
			} else if (s.startsWith(EXPERT_MASS)) {
			} else if (s.startsWith(EXPERT_PICKUP)) {
			} else if (s.startsWith(EXPERT_AUDIT_INCIDENT)) {
			} else if (s.startsWith(EXPERT_AUDIT_OHD)) {
			}
			
		} else if (tenDigitPattern.matcher(s).find()) {
			logger.debug("Tag Number... 1");
			dto.setRedirect(REDIRECT_TAG_NUMBER_SEARCH);
		} else if (nineDigitPattern.matcher(s).find()) {
			logger.info("Tag Number... 2");
			dto.setRedirect(REDIRECT_TAG_NUMBER_SEARCH);
		} else if (twoCharPattern.matcher(s).find()) {
			logger.info("Tag Number... 3");
			dto.setRedirect(REDIRECT_TAG_NUMBER_SEARCH);
		} else if (pnrPattern.matcher(s).find()) {
			logger.info("PNR... 4");
			dto.setRedirect(REDIRECT_PNR_SEARCH);			
		} else if (bdoPattern.matcher(s).find()) {
			logger.info("BDO ID... 5");
			dto.setRedirect(REDIRECT_BDO_SEARCH);			
		} else if (ntIdPattern1.matcher(s).find()) {
			logger.info("NT ID... 6");
			dto.setRedirect(REDIRECT_NT_ID_SEARCH);			
		} else if (nineDigitPattern.matcher(s).find()) {

		} else {
			logger.error("Unknown function...");
		}
		
		return dto;
	}
	
	@Test
	public void testSearches() {
		QuickSearchDTO dto = null;
		
		// TAG NUMBER SEARCHES
		dto = search("0037123456");
		Assert.assertEquals(dto.getRedirect(), REDIRECT_TAG_NUMBER_SEARCH);
		dto = search("1037123456");
		Assert.assertEquals(dto.getRedirect(), REDIRECT_TAG_NUMBER_SEARCH);
		dto = search("037123456");
		Assert.assertEquals(dto.getRedirect(), REDIRECT_TAG_NUMBER_SEARCH);
		dto = search("US123456");
		Assert.assertEquals(dto.getRedirect(), REDIRECT_TAG_NUMBER_SEARCH);
		dto = search("B6123456");
		Assert.assertEquals(dto.getRedirect(), REDIRECT_TAG_NUMBER_SEARCH);
		
		// PNR SEARCHES
		dto = search("B61234");
		Assert.assertEquals(dto.getRedirect(), REDIRECT_PNR_SEARCH);
		dto = search("DUNLAF");
		Assert.assertEquals(dto.getRedirect(), REDIRECT_PNR_SEARCH);
		
		// ID SEARCHES
		dto = search("ATLUS12345678");
		Assert.assertEquals(dto.getRedirect(), REDIRECT_NT_ID_SEARCH);
		dto = search("ATLUS123456");
		Assert.assertEquals(dto.getRedirect(), REDIRECT_NT_ID_SEARCH);
		dto = search("ATLB6123456");
		Assert.assertEquals(dto.getRedirect(), REDIRECT_NT_ID_SEARCH);
		dto = search("ATLB6%13456");
		Assert.assertEquals(dto.getRedirect(), REDIRECT_NT_ID_SEARCH);
		dto = search("ATLB6013%56");
		Assert.assertEquals(dto.getRedirect(), REDIRECT_NT_ID_SEARCH);
		dto = search("ATLB6%013%56");
		Assert.assertEquals(dto.getRedirect(), REDIRECT_NT_ID_SEARCH);

		
		// BDO SEARCHES
		dto = search("BDO1");
		Assert.assertEquals(dto.getRedirect(), REDIRECT_BDO_SEARCH);
		dto = search("BDO123456789");
		Assert.assertEquals(dto.getRedirect(), REDIRECT_BDO_SEARCH);
		dto = search("BDO%789");
		Assert.assertEquals(dto.getRedirect(), REDIRECT_BDO_SEARCH);
		dto = search("BDO789%");
		Assert.assertEquals(dto.getRedirect(), REDIRECT_BDO_SEARCH);
		dto = search("BDO%789%");
		Assert.assertEquals(dto.getRedirect(), REDIRECT_BDO_SEARCH);


		// EXPERT SEARCHES
		dto = search("I:BLAH"); // INCDIENT
		Assert.assertEquals(dto.getRedirect(), REDIRECT_EXPERT);
		dto = search("O:BLAH"); // ONHAND
		Assert.assertEquals(dto.getRedirect(), REDIRECT_EXPERT);
		dto = search("A:BLAH"); // AGENT
		Assert.assertEquals(dto.getRedirect(), REDIRECT_EXPERT);
		dto = search("S:BLAH"); // STATION
		Assert.assertEquals(dto.getRedirect(), REDIRECT_EXPERT);
		dto = search("M:BLAH"); // MASS
		Assert.assertEquals(dto.getRedirect(), REDIRECT_EXPERT);
		dto = search("P:BLAH"); // PICKUP
		Assert.assertEquals(dto.getRedirect(), REDIRECT_EXPERT);
		dto = search("AI:BLAH"); // AUDIT INC
		Assert.assertEquals(dto.getRedirect(), REDIRECT_EXPERT);
		dto = search("AO:BLAH"); // AUDIT OHD
		Assert.assertEquals(dto.getRedirect(), REDIRECT_EXPERT);

	}

}
